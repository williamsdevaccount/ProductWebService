/**
 * NOTE: This class is auto generated by the swagger code generator program (2.2.3).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.*;

import io.swagger.annotations.*;
import io.swagger.model.Error;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import java.util.List;
import javax.validation.constraints.*;
import javax.validation.Valid;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2017-08-09T18:55:15.380Z")

@Api(value = "products", description = "the products API")
public interface ProductsApi {

    @ApiOperation(value = "get products", notes = "will get all products in the system", response = InlineResponse200.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = Products.class) })
    
    @RequestMapping(value = "/products",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Products> productsGet();


    @ApiOperation(value = "delete product", notes = "Will delete a product by its unique identifier.", response = Empty.class, tags={  })
    @ApiResponses(value = {
            @ApiResponse(code = 204, message = "Deleted", response = Empty.class),
            @ApiResponse(code = 404,message = "Not Found",response = Error.class)
    })
    
    @RequestMapping(value = "/products/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity productsIdDelete(@ApiParam(value = "",required=true,example = "598de7400b9aa696a074aa32") @PathVariable("id") String id);


    @ApiOperation(value = "get product", notes = "will get a product by its unique identifier", response = InlineResponse200Products.class, tags={  })
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "OK", response = InlineResponse200Products.class),
            @ApiResponse(code = 404,message = "Not Found",response = Error.class)
    })
    
    @RequestMapping(value = "/products/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<InlineResponse200Products> productsIdGet(@ApiParam(value = "",required=true ) @PathVariable("id") String id);


    @ApiOperation(value = "update product", notes = "will update a product's name or description based on input request body and identifier", response = InlineResponse200Products.class, tags={  })
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "OK", response = InlineResponse200Products.class),
            @ApiResponse(code = 404,message = "Not Found",response = Error.class),
            @ApiResponse(code = 422,message = "Unprocessable Entity",response = Error.class)
    })

    @RequestMapping(value = "/products/{id}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PATCH)
    ResponseEntity<InlineResponse200Products> productsIdPatch(@ApiParam(value = "",required=true ) @PathVariable("id") String id,@ApiParam(value = "" ,required=true )  @Valid @RequestBody NewProduct newProduct);


    @ApiOperation(value = "create product", notes = "will create a new product.", response = InlineResponse200Products.class, tags={  })
    @ApiResponses(value = {
            @ApiResponse(code = 201, message = "Created", response = InlineResponse200Products.class),
            @ApiResponse(code = 422,message = "Unprocessable Entity",response = Error.class)
    })
    
    @RequestMapping(value = "/products",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<InlineResponse200Products> productsPost(@ApiParam(value = "" ,required=true )  @Valid @RequestBody NewProduct newProduct);

}
